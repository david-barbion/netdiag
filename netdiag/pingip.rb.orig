require 'net/ping'
module Netdiag
  class PingIP
    attr_reader :data
    def initialize(ip, count, timeout=1)
      @ip = ip
      @timeout = timeout
      @port = 9
      @data = Hash.new
      @count = count

    end
  
    def do
      rtt = Array.new
      no_response = 0
      (1..@count).each do
        begin
          rtt << self.udp_ping(@ip)
        rescue Exception => err
          no_response += 1
      #    puts "#{err.message} for #{@ip}"
      #    puts err.backtrace
        end
      end
  
      begin
        @data[:rtt] = rtt.inject(0) {|sum, i| sum + i}/(@count - no_response)
      rescue
        @data[:rtt] = nil
      end
      @data[:failure] = no_response
      @data[:count] = @count
      @data[:ip] = @ip
      @data
    end
  
    MAX_DATA = 64
    def udp_ping(host = @ip, port = @port)
      bool = false
      if host =~ /:/
        udp   = UDPSocket.new(Socket::AF_INET6)
      else
        udp   = UDPSocket.new(Socket::AF_INET)
      end
      array = []
  
      #udp.bind(host, port)
  
      start_time = Time.now
  
      begin
        Timeout.timeout(@timeout){
          udp.connect(host, port)
          udp.send('Ping', 0)
          array = udp.recvfrom(MAX_DATA)
        }
        bool = true
      rescue Errno::ECONNREFUSED, Errno::ECONNRESET => err
        bool = true
      ensure
        udp.close if udp
      end
      @duration = Time.now - start_time if bool
      raise 'ping timeout' if not bool
      @duration
    end
  
  end
end
